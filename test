#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define NbAnimal 50
#define MAX 1000

typedef enum{
    chien = 1, 
    chats, 
    hamsters,
    autruche
}Espece;

typedef struct{
    int id;
    int annee;
    float poids;
    char nom[MAX];
    char descrip[MAX];
    Espece espece;
}Animal;

Animal refuge[NbAnimal];
int nb_animal= 0;
int prochain_id=1;


void afficheAnimale(Animal a, int choix){
	printf("-----\n");
	printf("Nom : %s\n", a.nom);
	printf("id : %d\n", a.id);
	printf("annee : %d\n", a.annee);
	printf("poids : %.2f kg\n", a.poids);
	switch(a.espece){
        case 1 :
       		printf("Espece : chien \n");
       		break;
        case 2 :
       		printf("Espece : chat \n");
      		break;
        case 3 :
        	printf("Espece : Hamster \n");
        	break;
        case 4 :
        	printf("Espece : Autruche \n");
        	break;
	}
	if(choix==1){  
        printf("description : %s\n", a.descrip);
	}
    printf("-----\n");   
    }
	
    int sauvegarder_animaux() {
        FILE *f = fopen("animaux.txt", "w");  
        if (f== NULL) {  
            printf("Erreur lors de l'ouverture du fichier de sauvegarde.\n");
            return 1;
        }
        
        for (int i = 0; i < nb_animal; i++) {
            Animal a = refuge[i];
            fprintf(f, "%d;%d;%f;%d;%s;%s\n", a.id, a.annee, a.poids, a.espece, a.nom, a.descrip);
        }
        
        fclose(f);  
        return 0;
    }

void ajouter_animal(){ 
    if (nb_animal >= NbAnimal) {
    	printf("Capacit√© maximale atteinte.\n");
	}
	else{	
		Animal a;
		a.id = prochain_id++;
		
		printf("Nom : \n");
		fgets(a.nom, MAX,stdin);
		a.nom[strcspn(a.nom, "\n")] = '\0';

	do{
		printf("Esp√®ce (1:Chien, 2:Chat, 3:Hamster, 4:Autruche) : \n");
		scanf("%d", &a.espece);
		while (getchar() != '\n');
	} while(a.espece<1 || a.espece>4);

	do{
		printf("Ann√©e de naissance : \n");
		scanf("%d", &a.annee);
		while (getchar() != '\n');
	} while(a.annee<0);
	
	do{
		printf("Poids (kg) : \n");
		scanf("%f", &a.poids);
		while (getchar() != '\n');
	} while(a.poids<=0);   

	int choix;
	do{
		printf("Voulez-vous ajouter une description : 1 oui 2 non \n");
		scanf("%d", &choix);
		while (getchar() != '\n');
	} while(choix!=1 && choix!=2);
		if (choix == 1){
    			printf("Description : \n");
    			fgets(a.descrip, MAX,stdin);
            		a.descrip[strcspn(a.descrip, "\n")] = '\0';
		}
	refuge[nb_animal++] = a;
        afficheAnimale(a, choix);

    printf("‚úÖ Animal ajout√© avec succ√®s.\n");
    sauvegarder_animaux();
}}


void adopter_animal() {
    int id;
    do{
	    printf("ID de l'animal √† adopter : ");
	    scanf("%d", &id);
	    while (getchar() != '\n');
    }while(id<=0);

    int trouv√© = 0;
    for (int i = 0; i < nb_animal; i++) {
        if (refuge[i].id == id) {
            trouv√© = 1;
            printf("Animal trouv√© :\n");
            afficheAnimale(refuge[i], 1);
            for (int j = i; j < nb_animal - 1; j++) {
                refuge[j] = refuge[j + 1];
            }
            nb_animal--;
            printf("Animal avec ID %d adopt√© avec succ√®s.\n", id);
            break;
        }
    }
	
    if (trouv√©==0) {
        printf("Aucun animal trouv√© avec l'ID %d.\n", id);
    }
    
    sauvegarder_animaux();
}

void rechercher_animaux() {
    Animal a;
    char nom[MAX];
    int filtre_espece, age_type;
    int critere_nom = 0, critere_espece = 0, critere_age = 0;

    printf("Rechercher par nom ? (1:Oui / 0:Non) : ");
    scanf("%d", &critere_nom);
    while (getchar() != '\n');
    if (critere_nom == 1) {
        printf("Entrez le nom : ");
        fgets(nom, MAX,stdin);
        nom[strcspn(nom, "\n")] = '\0';
    }

    printf("Rechercher par esp√®ce ? (1:Oui / 0:Non) : ");
    scanf("%d", &critere_espece);
    while (getchar() != '\n');
    if (critere_espece == 1) {
        printf("Esp√®ce (1:Chien, 2:Chat, 3:Hamster, 4:Autruche) : ");
        scanf("%d", &filtre_espece);
        while (getchar() != '\n');
    }

    printf("Rechercher par type d'√¢ge ? (1:Oui / 0:Non) : ");
    scanf("%d", &critere_age);
    while (getchar() != '\n');
    if (critere_age == 1) {
        printf("1: Jeune (<2 ans), 2: Senior (>10 ans) : ");
        scanf("%d", &age_type);
        while (getchar() != '\n');
    }

    int trouve = 0;
    int annee_courante = 2025;
    for (int i = 0; i < nb_animal; i++) {
        a = refuge[i];
        int age = annee_courante - a.annee;

        int repere = 1;
        if (critere_nom == 1 && strcmp(a.nom, nom) != 0)
            repere = 0;
        if (critere_espece == 1 && a.espece != filtre_espece)
            repere = 0;
        if (critere_age == 1) {
            if ((age_type == 1 && age >= 2) || (age_type == 2 && age <= 10))
                repere = 0;
        }

        if (repere == 1) {
            afficheAnimale(a, 1);
            trouve = 1;
        }
    }
    if (trouve==0){
        printf("Aucun animal ne correspond aux crit√®res.\n");
    }
}

void modifierAnimal() {
    int id;
    int trouve = 0;

    do {
        printf("ID de l'animal √† modifier : ");
        scanf("%d", &id);
        while (getchar() != '\n');
    } while (id <= 0);

    for (int i = 0; i < nb_animal; i++) {
        if (refuge[i].id == id) {
            trouve = 1;
            afficheAnimale(refuge[i], 1);  // Avant modification

            int modif;
            do {
                printf("Modifier: 1 le nom | 2 l'ann√©e de naissance | 3 l'esp√®ce | 4 le poids | 5 la description\n");
                scanf("%d", &modif);
                while (getchar() != '\n');
            } while (modif < 1 || modif > 5);

            switch (modif) {
                case 1:
                    printf("Nouveau nom : ");
                    fgets(refuge[i].nom, MAX, stdin);
                    refuge[i].nom[strcspn(refuge[i].nom, "\n")] = '\0';
                    break;

                case 2:
                    do {
                        printf("Nouvelle ann√©e de naissance : ");
                        scanf("%d", &refuge[i].annee);
                        while (getchar() != '\n');
                    } while (refuge[i].annee < 0);
                    break;

                case 3:
                    do {
                        printf("Nouvelle esp√®ce (1=chien, 2=chat, 3=hamster, 4=autruche) : ");
                        scanf("%d", (int*)&refuge[i].espece);
                        while (getchar() != '\n');
                    } while (refuge[i].espece < 1 || refuge[i].espece > 4);
                    break;

                case 4:
                    do {
                        printf("Nouveau poids : ");
                        scanf("%f", &refuge[i].poids);
                        while (getchar() != '\n');
                    } while (refuge[i].poids < 0);
                    break;

                case 5:
                    printf("Nouvelle description : ");
                    fgets(refuge[i].descrip, MAX, stdin);
                    refuge[i].descrip[strcspn(refuge[i].descrip, "\n")] = '\0';
                    break;
            }

            printf("‚úÖ Animal modifi√© avec succ√®s !\n");
            afficheAnimale(refuge[i], 1);  // Apr√®s modification
            break;
        }
    }

    if (trouve ==0) {
        printf("‚ùå Aucun animal trouv√© avec l'ID %d.\n", id);
    }
    sauvegarder_animaux();
}


void day_food() {
    int annee_courante;
    do{
        printf("\n Entrez l'ann√©e actuelle : ");
        scanf("%d", &annee_courante);
        while (getchar() != '\n');
    }while(anne_courante<0);

    float total_croquettes_kg = 0.0;

    for (int i = 0; i < nb_animal; i++) {
        Animal a = refuge[i];
        int age = annee_courante - a.annee;

        switch (a.espece) {
            case hamsters:
                total_croquettes_kg += 0.02; // 20g
                break;
            case autruche:
                total_croquettes_kg += 2.5;   // 2.5kg
                break;
            case chats:
            case chien:
                if (age < 2) {
                    total_croquettes_kg += 0.5; // 500g
                } else {
                    total_croquettes_kg += a.poids * 0.10; // 10% du poids
                }
                break;
        }
    }

    printf("\nüçΩÔ∏è  Quantit√© totale de croquettes n√©cessaire aujourd'hui : %.2f kg\n", total_croquettes_kg);
}

void charger_animaux() {
    FILE *f = fopen("animaux.txt", "r");  
    if (!f) return;  

    Animal a;
    while (fscanf(f, "%d;%d;%f;%d;%[^;];%[^\n]\n", &a.id, &a.annee, &a.poids, (int*)&a.espece, a.nom, a.descrip) == 6) {
        refuge[nb_animal++] = a;  
        if (a.id >= prochain_id) 
            prochain_id = a.id + 1;
    }
    fclose(f);  
}


void afficherInventaireNbDesc() {
    int compteur[4] = {0}; 
    int indices[4] = {0, 1, 2, 3}; 

   
    for (int i = 0; i < nb_animal; i++) {
        if (refuge[i].espece >= chien && refuge[i].espece <= autruche) {
            compteur[refuge[i].espece - 1]++;
        }
    }

    for (int i = 0; i < 3; i++) {
        for (int j = i + 1; j < 4; j++) {
            if (compteur[i] < compteur[j]) {
                
                int tmp = compteur[i];
                compteur[i] = compteur[j];
                compteur[j] = tmp;
                
                int tmpIdx = indices[i];
                indices[i] = indices[j];
                indices[j] = tmpIdx;
            }
        }
    }


    const char *nomsEspeces[4] = { "Chien üê∂", "Chat üê±", "Hamster üêπ", "Autruche üê¶" };

    printf("\nüì¶ Nombre total d'animaux : %d\n", nb_animal);
    printf("üìä D√©tail par esp√®ce (ordre d√©croissant) :\n");

    for (int i = 0; i < 4; i++) {
        if (compteur[i] > 0) {
            printf("   - %s : %d\n", nomsEspeces[indices[i]], compteur[i]);
        }
    }
}

int calculer_charge_nettoyage_hebdomadaire() {
    int total_minutes = 0;

    for (int i = 0; i < nb_animal; i++) {
        switch (refuge[i].espece) {
            case hamsters:
                 total_minutes += (10 * 7) + 20; // 10 min/jour + 20 min/semaine
                 break;
            case chats:
                total_minutes += (10 * 7) + 20; // 10 min/jour + 20 min/semaine
                break;
            case autruche:
                total_minutes += (20 * 7) + 45; // 20 min/jour + 45 min/semaine
                break;
            case chien:
                total_minutes += (5 * 7) + 20;  // 5 min/jour + 20 min/semaine
                break;
            default:
                break;
        }
    }
 int nb_vides = NbAnimal - nb_animal;
    total_minutes += nb_vides * 14;
       return total_minutes;
}


void afficherBanniere() {
    printf("\033[1;34m"); 
     printf("\n");
     printf("                 ****   **    **  ********  **       **  **     **        *********  ********    ****   **    **\n");
     printf("                **  **  **    **  **        ** **    **   **   **             **     **         **  **  **    **\n");
     printf("               **       **    **  **        **  **   **    ** **              **     **        **       **    **\n");
     printf("               **       ********  ******    **   **  **     ***               **     ********  **       ********\n");
     printf("               **       **    **  **        **    ** **     ***    ******     **     **        **       **    **\n");
     printf("                **  **  **    **  **        **     ****     ***               **     **         **   ** **    **\n");
     printf("                 ****   **    **  ********  **      ***     ***               **     ********    ****   **    **\n");
     printf("\033[0m"); 
 }
 


int afficherMenu() {
    printf("\n\033[1;3m"); 
    printf("                              ======================== MENU PRINCIPAL ========================\n");
    printf("                              |                                                              |\n");
    printf("                              |   1. ‚ûï Ajouter un animal                                    |\n");
    printf("                              |   2. üîç Rechercher un animal                                 |\n");
    printf("                              |   3. üè† Adopter un animal                                    |\n");
    printf("                              |   4. üì¶ Afficher l'inventaire                                |\n");
    printf("                              |   5. üßΩ Afficher la charge de nettoyage hebdomadaire         |\n");
    printf("                              |   6. üçΩÔ∏è Afficher la quantit√© de nourriture quotidienne       |\n");
    printf("                              |   7. üìù Modifier les informations d‚Äôun animal                |\n");                  
    printf("                              |   8. ‚ùå Quitter le programme                                 |\n");
    printf("                              |______________________________________________________________|\n");
    printf("\033[0m\n");
    printf("\n‚úÖ Veuillez S√©lectionner Une Action (Tapez 8 Pour Quitter ‚ùå) : ");
	
    int choix;

        scanf("%d", &choix);
        while (getchar() != '\n');
	    
        switch (choix) {
            case 1:
                printf("‚Üí [Ajouter un animal] üê∂\n");
                ajouter_animal();
                break;
            case 2:
                printf("‚Üí [Rechercher un animal] üîç\n");
                rechercher_animaux();
                break;
            case 3:
                printf("‚Üí [Retirer un animal] üö™\n");
                adopter_animal();
                break;
            case 4:
                printf("‚Üí [Afficher l'inventaire] üìã\n");
                afficherInventaireNbDesc();
                break;
            case 5:
				printf("‚Üí [Afficher charge de travail] üß≥\n");
					{
				int total_minutes = calculer_charge_nettoyage_hebdomadaire();
				int heures = total_minutes / 60;
				int minutes = total_minutes % 60;
       
				//printf("üßº Charge totale de nettoyage hebdomadaire : %d minutes\n", total_minutes);//
				printf("‚è±Ô∏è Charge totale de nettoyage hebdomadaire : %02dh %02dmin\n", heures, minutes);
				}
				break;

            case 6:
				printf("‚Üí [Afficher la quantit√© de croquettes] üçΩÔ∏è\n");
				day_food();
				break;
            case 7:
                    printf("‚Üí [Modifier un animal] üìù\n");
                    modifierAnimal();
                break;
            case 8:
                printf("Au revoir ! üëã\n");
                break;
            default:
                printf("Choix invalide, r√©essaie ! ‚ùå\n");
                break;
    }
    return choix;
}


int main(){
    int a=0;
    afficherBanniere();
    charger_animaux();
    while(a != 8){
	   a= afficherMenu();
    }
	
return 0;
}
